---
layout: post
title: "#4 The Coolness of Status Codes and the Beginning of Internet"
date: 2025-08-20 00:00:01
tags: Information Programming Tech Technology Video-Recommendations
---

## First Order of the Day: Http-Status Codes and also Sleepy Corner
Good Day y'all, how is everyone, today i wanna beginn with telling you about Statuscodes, like the all known **404** and what do all the other 403 codes mean.
But why Sleepy Corner, well, yesterday as i was going to sleep i was listening to a Youtube Video from [vlogbrothers about Http-Statuscodes](https://youtu.be/aqsEa1P8iPQ?si=hZmjzuXMg6T2HcN9), which gave me the Idea to look into them myself and tell you all about them:

Of course we're starting with:
##### The 100s:
The 100s are codes you the user will never see, because they happen all the Time, they just give a response to show the status of ongoing procedures:
> 100: Continue => Data looks good so far, keep going. <br>
> 101: Switching Protocols => When the Client sends out a [Upgrade](https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Upgrade) request header the Server can respond with 101 which means that the Server switched to the specified Protocol
> 102: Processing => **Deprecated!** The Server received a full request and is working on it, it is sent out when the Server expects the Process to take long. But this code is Deprecated and is removed most relevant web standarts, in the process of being removed, or only kept for compat.
> 103: Early Hints => The Server is still preparing the Data, but is already sending bits of it so the client can start preloading.

##### The 200s:
The 200s are codes sent when a request has succeeded, it's the users favourite:
> 200: OK => Probably the most common (don't pin me on that). It just means ok -üëç Request Success  <br>
> 201: Created => This Code is sent out by the Server if the Request was a successfull **POST**, it basically means that the Data that was sent, got successfully uploaded to the Database  <br>
> 202: Accepted => The Request that was sent, was accepted by the Server for Processing but has not finsished or even started yet, the Client does not expect another response with Data or the outcome of the Request.  <br>
> 203: Non-Authoritative Information => The Request was successfull, but a transforming Proxy has changed the Response header and/or body.  <br>
> 204: No Content => Means that a writing request has succeeded, either **DELETE** or **PUT**, but the client does not need to change or navigate away from the current page.  <br>
> 205: Reset Content => Like **204** but instead the Content needs to be cleared.  <br>
> 206: Partial Content => This Code comes in response of a Content-Range request with the Content-Type beeing a full document, so it sends out parts of a full Document.  <br>
> 207: Multi-Status => We got a weird one, this one indicates a mixture of responses. This never occurs in a Browser accessing web pages, it is instead used as part of the [WebDAV](https://developer.mozilla.org/en-US/docs/Glossary/WebDAV) protocol.  <br>
> 208: Already Reported => Another **WebDAV** Response. If the same Resource (for example, as part of a collection) is requested through different paths, only the First instance is beeing reported to reduce Response Size and avoid conflict in creation.  <br>
> 226: IM Used => **NOT** I'm Used. This is a bit more complicated: the Code 226 indicates that the Server respons with a delta in response of a GET request, meaning it only returns the difference (I think). IM stands for Instancec Manipulation, this refers to an algorithm generating a delta. **This is poorly Supported and has few implementations, most system use compression methods to reduce bandwith** [I recommend reading through this one yourself](https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status/226) <br>

##### The 300s:
Now these ones you don't see often, they are Redirection Responses:
> 300: Multiple Choices => The Request has multiple possible Responses, commonly used in Localization, the user or user-agent should choose one of them. <br>
> 301: Moved Permanently => The requested resource moved to the URL in the Location header. Browsers will then instead use the new Location to request the Resource. The assigned SEO value is moved to the new URL. <br>
> 302: Found => Basically 301 but the resource only moved temporarily. The SEO value is not transferred. <br>
> 303: See Other => The Server recommends the Browser should redirect to the new URL referred to in the Location header, most of the Time this is followed by a User Confirmation to redirect. <br>
> 304: Not Modified => This just means that there is no need to retransmit the resource, because it has not changed, just use the one you already have. <br>
> 307: Temporary Redirect => Basically **302** but **307** guarantees that the client **will not change** the request method and body when the redirect is made. <br>
> 308: Permanent Redirect => Basically **301** but again **308** guarantees thatthe request method and body **does not change**, because older clients dont handle **301** correctly and will instead change it to a **GET** method. <br>

##### The 400s:
No one likes to see those, and yet, my favourite is one of them. These mean that the Client is the Problem:
> 400: bad Request => The request body is malformed and cannot or will not be processed. <br>
> 401: Unauthorized => The client is not authorized to perform this request. <br>
> 402: Payment Required => The server want the clients lunch money and denies request until they pay up. **Currently a nonstandart Response, reserved for future use**. <br>
> 403: Forbidden => The Server understood the request but refused to process it, but instead of **401**, Authenticating or Re-Authenticating makes no Difference, maybe because the Server itself has no access to the Resource. If the server owner decides they don't want the user to know the resource exists in the first place, they tend to send a **404**. <br>
> 404: Not Found => Uh oh, explanation not found. <br>
> 405: Method not Allowed => The Server knows exactly what the Client wants to do, but the Target Resource doesn't. <br>
> 406: Not Acceptable => There was a Resource but the Content of it did not match the acceptable values that were defined in the request header. <br>
> 407: Proxy Authentication Required => The request was failed, because it was not authorized with the Proxy Server that Sits between client and server. <br>
> 408: Request Timeout => Servers send this Code on idling connections because they get bored of waiting for requests from the client. Usually this comes with an **Connection: close** in the header field. <br>
> 409: Conflict => The request was denied, because it conflicts with the target resource, for example, trying to start job but the job is already running <br>
> 410: Gone => The requested source vanished from the face of the earth and will probably not come back. <br>
> 411: Length Required => The Server denied the Request because it wants a defined **Content-Length** <br>
> 412: Precondidion Failed => Access to the Resource was denied because a condition defined in the header failed. <br>
> 413: Content Too large => The Request Body was larger than the Limits defined by the Server.  <br>
> 414: URI Too Long => The URI used to request the resource was too long and the Server got bored while reading it, seems like the server has ADHD <br>
> ![Too Long](../images/post_4/too_long.png) <br>
> 415: Unsupported Media Type => The server denied the request because it doesn't support the message content format<br>
> 416: Range Not Satisfiable => The server could not serve the requested ranges because the Document doesn't containt such ranges or the Range header value does not make sense in that context. <br>
> 417: Expectation Failed => The defined expectations in the request header could not be met by the server. <br>
> 418: I'm a teapot => **My favourite‚ù§Ô∏è** The request made, was for the creation of a coffee, but the server could not process that since it is and alway will be a Teapot, this error is mainly used by the [HTCPCP](# "Hyper Text Cofffe Pot Control Protocol"). If the server is a Coffepot-Teapot Combo but is temporarily out coffee, it should return a **503** instead. <br>
> 421: Misdirected Request => The Request was directed to a server that is not able to produce a response. <br>
> 422: Unprocessable Content => The Server understood the content and it's Syntax, but coud not process it. <br>
> 423: Locked => The resource is locked and cannot be accessed. <br>
> 424: Failed Dependency => The requested action was dependent on another action, but that action failed. <br>
> 425: Too Early => **Only available on Firefox**. The server didn't want to risk processing a request that might be replayed to avoid potential replay attacks. <br>
> 426: Upgrade Required => The Protocol in use at that time by the client isn't good enough, they should upgrade it, maybe then the server will process it. <br>
> 428: Precondition Required => The server requires the Request to be conditional. <br>
> 429: Too Many Request => The server received too many requests by the client and asks it to slow down. <br>
> 431: Request Header Fields Too Large => The request is beeing refused because the request header is too long either because of the Referer URL being too long or too many Cookies beeing present. <br>
> 451: Unavailable For Legal Reasons => The Resource(s) requested are not available due to them being illegal. <br>

##### The 500s:
Basically the Server saying: "I'm the Problem and i don't want to elaborate further":
> 500: Internal Server Error => The error is known, but not fixed, don't ask. <br>
> 501: Not Implemented => The method the request would call was not programmed yet. <br>
> 502: Bad Gateway => **The Unholy One**. A Server was acting as a gateway or proxy server and the response by an upstream server was invalid. <br>
> 503: Service Unavailable => The server is still in the shower and isn't ready to handle the request. This happens during maintenance, software updates or server admins temporarily routing all traffic to a **503** page, <br>
> 504: Gateway Timeout => The gateway or proxy server didn't receive a response in time from the upstream server. <br>
> 505: HTTP Version Not Supported => The HTTP version used in the request is not supported by the server.  <br>
> 506: Variant Also Negotiates => The process of selecting a resource contains a loop. <br>
> 507: Insufficient Storage => The Server Admins forgot that 400mb of Storage is not sufficient for a high traffic website. <br>
> 508: Loop Detected => The entire Operation failed because it encountered an infinite loop while processing the request. <br>
> 510: Not Extended => The request declares an HTTP Extension that is not supported. <br>
> 511: Network Authentication Required => The client needs to authenticate with the intercepting proxies to gain network access. <br>

Damn,... that was a lot. Anyways let's continue.

## The First Internet
The First Internet, mainly being ARPANET, is considered the precursor to the modern intenet beeing one of the firsts to use packet switching => ```breaking down packages into smaller pieces to be reconstructed at the receivers end```, which was a majoin innovation to the earlier circuit-switched networks.
The first message on ARPANET was just "Lo", it was supposed to be login, but the system crashed. 
It was primarily used as a connection between universities, research institutions and government facilities to make coorporating researches possible and improve academic processes. It was used to log into computers remotely and use the servers on that computers side.

## Don't know what title to use
Today was rather Informational than just random stuff and progress thrown together, but it was fun to reserch these things, hope you liked it anyway. 

## Got some Video Recommendations for you
> ["Ok, but What Are The Other 403 Errors?"](https://youtu.be/aqsEa1P8iPQ?si=hZmjzuXMg6T2HcN9) by vlogbrothers [5:05]
> ["no one knows who created skull trumpet (until now)"](https://youtu.be/ZYcHOEjGzPA?si=qr3VyG4bGG6JzRTW) by Jeffiot [42:26]

**Sources:**
 - [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status)
 - [MDN ARPANET](https://developer.mozilla.org/en-US/docs/Glossary/Arpanet)
 - [Wikipedia ARPANET](https://en.wikipedia.org/wiki/ARPANET)